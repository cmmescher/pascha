#!/usr/bin/env sh
#
# Version 2.0
#
# pascha - the date of Pascha (Easter)
# Copyright (C) 2020, 2021 Christopher Michael Mescher
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Contact !(echo \<pascha-mescher+faith\>|sed s/\+/./g\;s/\-/@/) for bug
# reporting.

### Set variables for options and other initial values

# Year flags and values
year=""
byzyear=""
useyear=""
byz=""
s=""

# Calendar for calculation
jul=""
greg=""

# Calendar for display
julDisp=""
rJulDisp=""
gregDisp=""

# Default name for verbose output and flags
name="Pascha"
verbose=""
easter=""

# Output separator default falue
sep=-

# Date conversion values
jdn=""

# Chronological display and output supression
chron=""
x=""

# Optional calculation flags
daysUntil=""
weeksBetween=""

# Optional date flags
meat=""
cheese=""
ash=""
mid=""
leave=""
asc=""
pent=""

### Function definitions

usage() { echo "Usage: $0 [-j|-g] [-J|-R|-G] [-bsdDmcaMlApxXvV] [-s <SEP>] [-y <YEAR>]" 1>&2; exit 1; }

##
## Functions for date calulation
##

# Calculates the month and day of Julian Pascha,
# setting ${month} and ${day}
julian () {
    a=$(( year % 4 ))
    b=$(( year % 7 ))
    c=$(( year % 19 ))
    d=$(( (19 * c + 15) % 30 ))
    e=$(( (2 * a + 4 * b - d + 34) % 7 ))
    month=$(( (d + e + 114) / 31 ))
    day=$(( ((d + e + 114) % 31) + 1 ))
}

# Calculates the month and day of Gregorian Pascha,
# setting ${month} and ${day}
gregorian () {
    a=$(( year % 19 ))
    b=$(( year / 100 ))
    c=$(( year % 100 ))
    d=$(( b / 4 ))
    e=$(( b % 4 ))
    f=$(( (b + 8) / 25 ))
    g=$(( (b - f + 1) / 3 ))
    h=$(( (19 * a + b - d - g + 15) % 30 ))
    i=$(( c / 4 ))
    k=$(( c % 4 ))
    l=$(( (32 + 2 * e + 2 * i - h - k) % 7 ))
    m=$(( (a + 11 * h + 22 * l) / 451 ))
    month=$(( (h + l - 7 * m + 114) / 31 ))
    day=$(( ((h + l - 7 * m + 114) % 31) + 1 ))
}

##
## Functions for calendar conversion
##

# Calculates the Revised Julian date ${year}, ${month}, and ${day}
# based on the Julian day number ${jdn}
jdn_to_RevJulian () {
    day=$(( jdn - 1721120 ))
    ai=$(( 9 * day + 2 ))
    a=$(( ai / 328718 ))

    if [ $ai -lt 0 ] && [ $(( ai % 328718 )) -ne 0 ]; then a=$(( a - 1 )); fi
    a2=$(( (a + 3) / 9 ))
    if [ $a -lt -3 ] && [ $(( a % 9 )) -ne -3 ]; then a2=$(( a2 - 1 )); fi
    a3=$(( (a + 7) / 9 ))
    if [ $a -lt -7 ] && [ $(( a % 9 )) -ne -7 ]; then a3=$(( a3 - 1 )); fi

    day=$(( day + a - a2 - a3 ))

    yeari=$(( 4 * day + 3 ))
    year=$(( yeari / 1461 ))
    if [ $yeari -lt 0 ] && [ $(( yeari % 1461 )) -ne 0 ]; then year=$(( year - 1 )); fi

    y=$(( 1461 * year / 4 ))
    if [ $year -lt 0 ] && [ $(( 1461 * year % 4 )) -ne 0 ]; then y=$(( y - 1 )); fi
    day=$(( day - y ))

    monthi=$(( 5 * day + 2 ))
    month=$(( monthi / 153 ))
    if [ $monthi -lt 0 ] && [ $(( monthi % 153 )) -ne 0 ]; then month=$(( month - 1 )); fi

    day2i=$(( 153 * month + 2 ))
    day2=$(( day2i / 5 ))
    if [ $day2i -lt 0 ] && [ $(( day2i % 5 )) -ne 0 ]; then day2=$(( day2 - 1 )); fi
    day=$(( day - day2 + 1))

    month=$(( month + 3 ))
    if [ $month -gt 12 ]
    then
        month=$(( month - 12 ))
        year=$(( year + 1 ))
    fi
}

# Calculates the Julian day number ${jdn}
# for the Gregorian ${year}, ${month}, and ${day}
gregorian_to_JDN () {
    y=$year
    m=$month

    if [ $y -lt 0 ]
    then
        cycles=$(( y / 400 - 1 ))
        if [ $(( y % 400 )) -eq 0 ]; then cycles=$(( cycles + 1 )); fi
        y=$(( (400 - (-1 * y % 400)) % 400 ))
    else
        cycles=$(( year / 400 ))
        y=$(( y % 400 ))
    fi

    if [ $m -lt 3 ]
    then
        y=$(( y - 1 ))
        m=$(( m + 12 ))
    fi

    if [ $y -lt 0 ] && [ $(( y % 4 )) -ne 0 ]
    then
        jdn=$(( 365 * y + (y / 4 - 1) ))
    else
        jdn=$(( 365 * y + y / 4 ))
    fi

    jdn=$(( jdn + 153 * (m + 1) / 5 + day - 123 ))

    if [ $y -lt 0 ]
    then
        if [ $(( y % 100 )) -ne 0 ]
        then
            if [ $(( y % 400 )) -ne 0 ]
            then
                jdn=$(( jdn - (y / 100 - 1) + (y / 400 - 1)  ))
            else
                jdn=$(( jdn - (y / 100 - 1) + y / 400  ))
            fi
        else
            if [ $(( y % 400 )) -ne 0 ]
            then
                jdn=$(( jdn - y / 100 + (y / 400 - 1)  ))
            else
                jdn=$(( jdn - y / 100 + y / 400  ))
            fi
        fi
    else
        jdn=$(( jdn - y / 100 + y / 400 ))
    fi

    jdn=$(( jdn + 1721120 + 146097 * cycles ))
}

# Calculates the Gregorian date ${year}, ${month}, and ${day}
# based on the Julian day number ${jdn}
jdn_to_Gregorian () {
    day=$(( jdn - 1721120 ))
    if [ $day -lt 0 ]
    then
        cycles=$(( day / 146097 - 1 ))
        if [ $(( day % 146097 )) -eq 0 ]; then cycles=$(( cycles + 1 )); fi
        day=$(( (146097 - (-1 * day % 146097)) % 146097  ))
    else
        cycles=$(( day / 146097 ))
        day=$(( day % 146097 ))
    fi

    a=$(( (4 * day + 3) / 146097 ))
    day=$(( day + a - a / 4 ))

    year=$(( (4 * day + 3) / 1461 ))
    day=$(( day - 1461 * year / 4 ))
    month=$(( (5 * day + 2) / 153 ))
    day=$(( day - (153 * month + 2) / 5 ))
    day=$(( day + 1 ))
    month=$(( month + 3 ))

    if [ $month -gt 12 ]
    then
        month=$(( month - 12 ))
        year=$(( year + 1 ))
    fi

    year=$(( year + 400 * cycles ))
}

# Calculates the Julian day number ${jdn}
# for the Gregorian ${year}, ${month}, and ${day}
julian_to_JDN () {
    y=$year
    m=$month

    if [ $y -lt 0 ]
    then
        cycles=$(( y / 4 - 1 ))
        if [ $(( y % 4 )) -eq 0 ]; then cycles=$(( cycles + 1 )); fi
        y=$(( (4 - (-1 * y % 4)) % 4 ))
    else
        cycles=$(( year / 4 ))
        y=$(( y % 4 ))
    fi

    if [ $m -lt 3 ]
    then
        y=$(( y - 1 ))
        m=$(( m + 12 ))
    fi

    if [ $y -lt 0 ] && [ $(( y % 4 )) -ne 0 ]
    then
        jdn=$(( 365 * y + (y / 4 - 1) ))
    else
        jdn=$(( 365 * y + y / 4 ))
    fi

    jdn=$(( jdn + 153 * (m + 1) / 5 + day - 123 ))

    jdn=$(( jdn + 1721118 + 1461 * cycles ))
}

# Calculates the Julian date ${year}, ${month}, and ${day}
# based on the Julian day number ${jdn}
jdn_to_Julian () {
    day=$(( jdn - 1721118 ))
    if [ $day -lt 0 ]
    then
        cycles=$(( day / 1461 - 1 ))
        if [ $(( day % 1461 )) -eq 0 ]; then cycles=$(( cycles + 1 )); fi
        day=$(( (1461 - (-1 * day % 1461)) % 1461  ))
    else
        cycles=$(( day / 1461 ))
        day=$(( day % 1461 ))
    fi

    year=$(( (4 * day + 3) / 1461 ))
    day=$(( day - 1461 * year / 4 ))
    month=$(( (5 * day + 2) / 153 ))
    day=$(( day - (153 * month + 2) / 5 ))
    day=$(( day + 1 ))
    month=$(( month + 3 ))

    if [ $month -gt 12 ]
    then
        month=$(( month - 12 ))
        year=$(( year + 1 ))
    fi

    year=$(( year + 4 * cycles ))
}

# Calculates the ${jdn} based upon the calculation calendar
get_JDN () {
    if [ -n "$jul" ]; then julian_to_JDN; else gregorian_to_JDN; fi
}

# Calculates the ${jdn} if it will be needed
get_JDN_If_Necessary () {
    if [ -n "$daysUntil" ] || [ -n "$weeksBetween" ] || [ -n "$meat" ] ||
           [ -n "$cheese" ] || [ -n "$ash" ] || [ -n "$mid" ] || [ -n "$leave" ] ||
           [ -n "$asc" ] || [ -n "$pent" ] || [ -n "$chron" ]
    then get_JDN
    elif [ -n "$jul" ] && [ -z "$julDisp" ]
    then get_JDN
    elif [ -n "$greg" ] && [ -z "$gregDisp" ]
    then get_JDN
    fi
}

# Calculates the output date on the display calendar based on the ${jdn}
jdn_to_Output () {
    if [ -n "$julDisp" ]; then jdn_to_Julian
    elif [ -n "$rJulDisp" ]; then jdn_to_RevJulian
    else jdn_to_Gregorian
    fi
}

##
## Functions for output and calculation control
##

# Calculates the Byzantine style A.M. year,
# setting ${byzyear}
byzantine_year () {
    byzyear=$(( year + 5508 ))
    [ "${month}" -gt 08 ] && byzyear=$(( byzyear + 1 ))
    return 0
}

# Calculates the date of Pascha,
# according to the specified calendar for calculation
calculate_pascha () {
    if [ -n "$jul" ]; then julian; else gregorian; fi
}

# Prints the currently calculated date,
# using ${month}, ${day}, and
# optionally ${year} or ${byzyear}, and
# optionally ${name} with verbose output
print () {
    month=$(printf "%02d" $month)
    day=$(printf "%02d" $day)
    output="${month}${sep}${day}"

    [ -n "$useyear" ] && [ -z "$byz" ] && [ -z "$s" ] &&
        output="${output}${sep}${year}"

    [ -n "$byz" ] && [ -z "$s" ] && byzantine_year &&
        output="${output}${sep}${byzyear}"

    [ -n "$verbose" ] && output="${name}: ${output}"

    echo "${output}"
}

# Gets the display date for the display calendar when it differs
# from the calculation calendar
get_Display () {
    if [ -n "$jul" ] && [ -n "$julDisp" ]; then :
    elif [ -n "$greg" ] && [ -n "$gregDisp" ]; then :
    else jdn_to_Output
    fi
}

# Shifts the currently calculated date by ${1} days,
# calculates and prints the result, and returns to the original ${jdn}
# without recalculating the associated original date
shift_and_print () {
    origJDN=$jdn
    jdn=$(( jdn + $1 ))
    jdn_to_Output
    print
    jdn=$origJDN
}

##
## Other date calculations
##

meatfare () {
    name="Meatfare"
    shift_and_print -56
}

cheesefare () {
    name="Cheesefare"
    shift_and_print -49
}

ash_wednesday () {
    name="Ash Wednesday"
    shift_and_print -46
}

midfeast () {
    name="Midfeast of Pentecost"
    shift_and_print 24
}

leavetaking () {
    name="Leavetaking of Pascha"
    shift_and_print 38
}

ascension () {
    name="Ascension"
    shift_and_print 39
}

pentecost () {
    name="Pentecost"
    shift_and_print 49
}

# Prints Pascha in its chronological location
chronological_pascha () {
    [ -n "$easter" ] && name="Easter" || name="Pascha"
    jdn_to_Output
    print
}

# Calculates the days between the current date's ${jdn} and
# the previous jdn, ${diffJDN}
diff_dates () {
    diffJDN=$jdn

    IFS=/ read -r year month day <<EOF
$(date +%Y/%m/%d)
EOF
    gregorian_to_JDN

    output=$(( diffJDN - jdn ))

    jdn=$diffJDN
    unset diffJDN
}

# Calculates the days until Pascha for next year, from the current date
date_next_pascha () {
    oldJDN=$jdn

    read -r year <<EOF
$(date +%Y)
EOF
    year=$(( year + 1 ))
    calculate_pascha
    get_JDN
    diff_dates

    jdn=$oldJDN
    unset oldJDN
}

# Calculates the days until Pascha from the current date
# if Pascha has already past for the current year,
# it calculates the days until Pascha next year
days_until () {
    [ -n "$easter" ] && name="Days until Easter" || name="Days until Pascha"

    diff_dates

    [ -z "$useyear" ] && [ ${output} -lt 0 ] && date_next_pascha

    [ -n "$verbose" ] && output="${name}: ${output}"

    echo "${output}"
}

# Calculates the number of weeks between the Julian and Gregorian
# dates for Pascha according to the ${year}
weeks_between () {
    diffJDN=$jdn
    name="Weeks between calendars"

    year=$inyear
    if [ -n "$jul" ]
    then
        gregorian
        gregorian_to_JDN
    else # [ -n "$greg" ]
        julian
        julian_to_JDN
    fi

    output=$(( diffJDN - jdn ))
    [ $output -le 0 ] && output=$(( -1 * output ))
    output=$(( output/7 ))

    [ -n "$verbose" ] && output="${name}: ${output}"

    echo "${output}"

    jdn=$diffJDN
    unset diffJDN
}

##
## Initialization, option parsing, and main
##

# Sets the default options if none are passed
# as well as performs initial cleanup
defaults () {
    # Remove extra flags given
    if [ -n "$jul" ]; then greg=0; fi

    if [ -n "$julDisp" ]
    then
        rJulDisp=""
        gregDisp=""
    elif [ -n "$rJulDisp" ]; then gregDisp=""; fi

    # Set defaults when no flags given
    [ -z "$jul" ] && [ -z "$greg" ] && jul=1

    if [ -z "$julDisp" ] && [ -z "$rJulDisp" ] && [ -z "$gregDisp" ]
    then [ -n "$jul" ] && julDisp=1 || gregDisp=1
    fi

    # Get current ${inyear} when none given
    [ -z "${inyear}" ] && inyear="$(date +%Y)"

    # Remove leading zeroes from ${inyear}
    inyear=${inyear%"${inyear#[+-]}"}${inyear#"${inyear%%[!0+-]*}"}
    [ -z "${inyear}" ] || [ "${inyear}" = "-" ] || [ "${inyear}" = "+" ]&& inyear=0

    # set ${year} (to be used in calculation) to ${inyear}
    year=$inyear
}

# Calculates and prints the appropriate dates according to the options
main () {
    defaults
    calculate_pascha
    get_JDN_If_Necessary
    get_Display
    [ -z "$x" ] && print
    [ -n "$daysUntil" ] && days_until
    [ -n "$weeksBetween" ] && weeks_between

    [ -n "$meat" ] && meatfare
    [ -n "$cheese" ] && cheesefare
    [ -n "$ash" ] && ash_wednesday
    [ -n "$chron" ] && chronological_pascha
    [ -n "$mid" ] && midfeast
    [ -n "$leave" ] && leavetaking
    [ -n "$asc" ] && ascension
    [ -n "$pent" ] && pentecost
}

### Option parsing

while getopts "jgJRGbsdDmcaMlApxXvVS:y:h" o; do
    case "${o}" in
        j)
            jul=1
            ;;
        g)
            greg=1
            ;;
        J)
            julDisp=1
            ;;
        R)
            rJulDisp=1
            ;;
        G)
            gregDisp=1
            ;;
        b)
            byz=1
            ;;
        s)
            s=1
            ;;
        d)
            daysUntil=1
            ;;
        D)
            weeksBetween=1
            ;;
        m)
            meat=1
            ;;
        c)
            cheese=1
            ;;
        a)
            ash=1
            ;;
        M)
            mid=1
            ;;
        l)
            leave=1
            ;;
        A)
            asc=1
            ;;
        p)
            pent=1
            ;;
        x)
            x=1
            ;;
        X)
            chron=1
            x=1
            ;;
        v)
            verbose=1
            ;;
        V)
            name="Easter"
            easter=1
            verbose=1
            ;;
        S)
            sep=${OPTARG}
            ;;
        y)
            inyear=${OPTARG}
            useyear=1
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

main
