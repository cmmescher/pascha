#!/usr/bin/env bash
#
# Version 1.2
#
# pascha - the date of Pascha (Easter)
# Copyright (C) 2020 Christopher Michael Mescher
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Contact <pascha@mescher.faith> for bug reporting.

### Set variables for options and other initial values

# Year flags and values
year=""
byzyear=""
y=0
byz=0
s=0

# Calendar for calculation and display
jul=0
greg=0
ns=0

# Default name for verbose output and flags
name="Pascha"
verbose=0
easter=0

# Chronological display and output supression
chron=0
x=0

# Optional calculation flags
daysUntil=0
weeksBetween=0

# Optional date flags
meat=0
cheese=0
ash=0
mid=0
leave=0
asc=0
pent=0

### Function definitions

usage() { echo "Usage: $0 [-j|-J|-g] [-bsdDmcaMlApxXvV] [-y <YEAR>]" 1>&2; exit 1; }

# Calculates the month and day of Julian Pascha,
# setting ${month} and ${day}
julian () {
    (( a = year % 4 ))
    (( b = year % 7 ))
    (( c = year % 19 ))
    (( d = (19 * c + 15) % 30 ))
    (( e = (2 * a + 4 * b - d + 34) % 7 ))
    (( month = (d + e + 114) / 31 ))
    (( day = ((d + e + 114) % 31) + 1 ))
    printf -v month "%02d" ${month}
    printf -v day "%02d" ${day}
}

# Calculates the month and day of Gregorian Pascha,
# setting ${month} and ${day}
gregorian () {
    (( a = year % 19 ))
    (( b = year / 100 ))
    (( c = year % 100 ))
    (( d = b / 4 ))
    (( e = b % 4 ))
    (( f = (b + 8) / 25 ))
    (( g = (b - f + 1) / 3 ))
    (( h = (19 * a + b - d - g + 15) % 30 ))
    (( i = c / 4 ))
    (( k = c % 4 ))
    (( l = (32 + 2 * e + 2 * i - h - k) % 7 ))
    (( m = (a + 11 * h + 22 * l) / 451 ))
    (( month = (h + l - 7 * m + 114) / 31 ))
    (( day = ((h + l - 7 * m + 114) % 31) + 1 ))
    printf -v month "%02d" ${month}
    printf -v day "%02d" ${day}
}

# Converts ${month} and ${day} from the Julian to Gregorian calendar
julian_to_gregorian () {
    (( offset=year / 100 - year / 400 - 2 ))
    local offset_year=0
    local jan_feb=0
    local feb29=0
    local year_offset=""

    ! (( $(( year % 100 )) )) && (( $(( year % 400 )) )) && offset_year=1
    { [ ${month} -eq 01 ] || [ ${month} -eq 02 ]; } && jan_feb=1
    [ ${month} -eq 02 ] && [ ${day} -eq 29 ] && feb29=1

    (( offset_year )) && (( jan_feb )) && (( offset -= 1 ))
    (( offset_year )) && (( feb29 )) && (( year += 4 )) && year_offset="-4 year"


    IFS=- read -r year month day <<< "$(date -d "${year}-${month}-${day} +${offset} day ${year_offset}" +%Y-%m-%d)"
}

# Shifts ${year}, ${month}, ${day} by ${1} days,
# according to the Julian calendar
shift_date_jul () {
    local offset=$1
    local offset_year=0

    ! (( year % 100 )) && (( year % 400 )) &&
        offset_year=1

    (( offset_year )) && (( year += 4 ))

    IFS=- read -r year month day <<< "$(date -d "${year}-${month}-${day} +${offset} day" +%Y-%m-%d)"

    (( offset_year )) && (( year -= 4 ))
}

# Shifts ${year}, ${month}, ${day} by ${1} days,
# according to the Gregorian calendar
shift_date_greg () {
    local offset=$1

    IFS=- read -r year month day <<< "$(date -d "${year}-${month}-${day} +${offset} day" +%Y-%m-%d)"
}

# Shifts ${year}, ${month}, ${day} by ${1} days,
# choosing the appropriate calendar
shift_date () {
     ! (( jul )) || (( ns )) &&
        shift_date_greg "$1" ||
            shift_date_jul "$1"
}

# Calculates the Byzantine style A.M. year,
# setting ${byzyear}
byzantine_year () {
    (( byzyear = year + 5508 ))
    [ "${month}" -gt 08 ] && (( byzyear++ ))
    return 0
}

# Prints the currently calculated date,
# using ${month}, ${day}, and
# optionally ${year} or ${byzyear}, and
# optionally ${name} with verbose output
print () {
    local output="${month}-${day}"

    (( y )) && ! (( byz )) && ! (( s )) &&
        output="${output}-${year}"

    (( byz )) && ! (( s )) && byzantine_year &&
        output="${output}-${byzyear}"

    (( verbose )) && output="${name}: ${output}"

    echo "${output}"
}

# Calculates the date of Pascha,
# according to the specified calendar for calculation and display
calculate_pascha () {
    [ -z "${year}" ] && year="$(date +%Y)"

    (( "${greg}" )) && ! (( "${jul}" )) &&
        gregorian ||
            julian

    (( "${ns}" )) && julian_to_gregorian
}

# Shifts the currently calculated date by ${1} days,
# prints the result, and returns to the original date
shift_and_print () {
    local offset=$1
    shift_date "${offset}"
    (( offset*=-1 ))
    print
    shift_date "${offset}"
}

meatfare () {
    name="Meatfare"
    shift_and_print -56
}

cheesefare () {
    name="Cheesefare"
    shift_and_print -49
}

ash_wednesday () {
    name="Ash Wednesday"
    shift_and_print -46
}

midfeast () {
    name="Midfeast of Pentecost"
    shift_and_print 24
}

leavetaking () {
    name="Leavetaking of Pascha"
    shift_and_print 38
}

ascension () {
    name="Ascension"
    shift_and_print 39
}

pentecost () {
    name="Pentecost"
    shift_and_print 49
}

# Prints Pascha in its chronological location
chronological_pascha () {
    (( easter )) && name="Easter" || name="Pascha"
    print
}

# Sets the varibles for calculating days until Pascha,
# when the date is calculated and displayed using the Julian calendar
# This effectively sets ${diffYear}, ${diffMonth}, and ${diffDay}
# to the Gregorian equivalent to ${year}, ${month}, and ${day}
set_diff_dates_julian () {
    (( offset=year / 100 - year / 400 - 2 ))
    local offset_year=0
    local jan_feb=0
    local feb29=0
    local year_offset=""

    ! (( year % 100 )) && (( year % 400 )) && offset_year=1
    { [ "${month}" -eq 01 ] || [ "${month}" -eq 02 ]; } && jan_feb=1
    [ "${month}" -eq 02 ] && [ "${day}" -eq 29 ] && feb29=1

    (( offset_year )) && (( jan_feb )) && (( offset -= 1 ))
    (( offset_year )) && (( feb29 )) && (( year += 4 )) && year_offset="-4 year"


    IFS=- read -r diffYear diffMonth diffDay <<< "$(date -d "${year}-${month}-${day} +${offset} day ${year_offset}" +%Y-%m-%d)"
}

# Sets the variables for calculating days until Pascha,
# when using the Gregorian calendar for either calculation or display
set_diff_dates_gregorian () {
    diffYear=${year}
    diffMonth=${month}
    diffDay=${day}
}

# Sets the variables for calculating days until Pascha,
# using the appropriate method based on the calendar used
set_diff_dates () {
    ! (( ns )) && { ! (( greg )) || (( jul )); } && set_diff_dates_julian ||
            set_diff_dates_gregorian
}

# Calculates the days between the current date
# and the date set by ${diffYear}, ${diffMonth}, and ${diffDay}
diff_dates () {
    output=$(( ($(date -d "${diffYear}-${diffMonth}-${diffDay}" +%s)- $(date -d "00:00" +%s))/86400 ))
}

# Calculates the days until Pascha for next year, from the current date
date_next_pascha () {
    local monthPascha=${month}
    local dayPascha=${day}

    (( year++ ))
    calculate_pascha
    set_diff_dates
    (( year-- ))
    diff_dates

    month=${monthPascha}
    day=${dayPascha}

}

# Calculates the days until Pascha from the current date
# if Pascha has already past for the current year,
# it calculates the days until Pascha next year
days_until () {
    (( easter )) && name="Days until Easter" || name="Days until Pascha"

    set_diff_dates
    diff_dates

    ! (( y )) && [ ${output} -lt 0 ] && date_next_pascha

    (( verbose )) && output="${name}: ${output}"

    echo "${output}"
}

# Calculates the number of weeks between the Julian and Gregorian
# dates for Pascha according to the ${year}
weeks_between () {
    local monthPascha=${month}
    local dayPascha=${day}
    name="Weeks between calendars"

    (( greg )) && ! (( jul )) && julian && julian_to_gregorian &&
        monthJul=${month} && dayJul=${day} &&
        monthGreg=${monthPascha} && dayGreg=${dayPascha} &&
        month=${monthPascha} && day=${dayPascha}

    (( ns )) && gregorian &&
        monthGreg=${month} && dayGreg=${day} &&
        monthJul=${monthPascha} && dayJul=${dayPascha} &&
        month=${monthPascha} && day=${dayPascha}

    ! (( ns )) && { ! (( greg )) || (( jul )); } && julian_to_gregorian &&
        monthJul=${month} && dayJul=${day} && gregorian &&
        monthGreg=${month} && dayGreg=${day} &&
        month=${monthPascha} && day=${dayPascha}

    output=$(( ($(date -d "${year}-${monthJul}-${dayJul}" +%s)- $(date -d "${year}-${monthGreg}-${dayGreg}" +%s))/86400/7 ))

    (( verbose )) && output="${name}: ${output}"

    echo "${output}"
}

# Calculates and prints the appropriate dates according to the options
main () {
    calculate_pascha
    ! (( x )) && print
    (( daysUntil )) && days_until
    (( weeksBetween )) && weeks_between

    (( meat )) && meatfare
    (( cheese )) && cheesefare
    (( ash )) && ash_wednesday
    (( chron )) && chronological_pascha
    (( mid )) && midfeast
    (( leave )) && leavetaking
    (( asc )) && ascension
    (( pent )) && pentecost
}

### Option parsing

while getopts "jJgbsdDmcaMlApxXvVy:h" o; do
    case "${o}" in
        j)
            jul=1
            ;;
        J)
            jul=1
            ns=1
            ;;
        g)
            greg=1
            ;;
        b)
            byz=1
            ;;
        s)
            s=1
            ;;
        d)
            daysUntil=1
            ;;
        D)
            weeksBetween=1
            ;;
        m)
            meat=1
            ;;
        c)
            cheese=1
            ;;
        a)
            ash=1
            ;;
        M)
            mid=1
            ;;
        l)
            leave=1
            ;;
        A)
            asc=1
            ;;
        p)
            pent=1
            ;;
        x)
            x=1
            ;;
        X)
            chron=1
            x=1
            ;;
        v)
            verbose=1
            ;;
        V)
            name="Easter"
            easter=1
            verbose=1
            ;;
        y)
            year=${OPTARG}
            y=1
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

main
