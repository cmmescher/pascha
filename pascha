#!/usr/bin/env sh
#
# Version 1.2
#
# pascha - the date of Pascha (Easter)
# Copyright (C) 2020 Christopher Michael Mescher
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Contact <pascha@mescher.faith> for bug reporting.

year=""
byzyear=""
y=0
byz=0
s=0

jul=0
greg=0
ns=0

name="Pascha"
verbose=0
chron=0
easter=0

meat=0
cheese=0
ash=0
mid=0
leave=0
asc=0
pent=0
x=0

daysUntil=0
weeksBetween=0

usage() { echo "Usage: $0 [-j|-J|-g] [-bsdDmcaMlApxXvV] [-y <YEAR>]" 1>&2; exit 1; }

julian () {
    let "a = year % 4"
    let "b = year % 7"
    let "c = year % 19"
    let "d = (19 * c + 15) % 30"
    let "e = (2 * a + 4 * b - d + 34) % 7"
    let "month = (d + e + 114) / 31"
    let "day = ((d + e + 114) % 31) + 1"
    printf -v month "%02d" ${month}
    printf -v day "%02d" ${day}
}

gregorian () {
    let "a = year % 19"
    let "b = year / 100"
    let "c = year % 100"
    let "d = b / 4"
    let "e = b % 4"
    let "f = (b + 8) / 25"
    let "g = (b - f + 1) / 3"
    let "h = (19 * a + b - d - g + 15) % 30"
    let "i = c / 4"
    let "k = c % 4"
    let "l = (32 + 2 * e + 2 * i - h - k) % 7"
    let "m = (a + 11 * h + 22 * l) / 451"
    let "month = (h + l - 7 * m + 114) / 31"
    let "day = ((h + l - 7 * m + 114) % 31) + 1"
    printf -v month "%02d" ${month}
    printf -v day "%02d" ${day}
}

julian_to_gregorian () {
    let "offset=${year} / 100 - ${year} / 400 - 2"
    local offset_year=0
    local jan_feb=0
    local feb29=0
    local year_offset=""

    ! (( $(( ${year} % 100 )) )) && (( $(( ${year} % 400 )) )) && offset_year=1
    { [ ${month} -eq 01 ] || [ ${month} -eq 02 ]; } && jan_feb=1
    [ ${month} -eq 02 ] && [ ${day} -eq 29 ] && feb29=1

    (( ${offset_year} )) && (( ${jan_feb} )) && let "offset -= 1"
    (( ${offset_year} )) && (( ${feb29} )) && let "year += 4" && year_offset="-4 year"


    IFS=- read year month day <<< $(date -d "${year}-${month}-${day} +${offset} day ${year_offset}" +%Y-%m-%d)
}

shift_date_jul () {
    local offset=$1
    local offset_year=0

    ! (( $(( ${year} % 100 )) )) && (( $(( ${year} % 400 )) )) &&
        offset_year=1

    (( ${offset_year} )) && let "year += 4"

    IFS=- read year month day <<< $(date -d "${year}-${month}-${day} +${offset} day" +%Y-%m-%d)

    (( ${offset_year} )) && let "year -= 4"
}

shift_date_greg () {
    local offset=$1

    IFS=- read year month day <<< $(date -d "${year}-${month}-${day} +${offset} day" +%Y-%m-%d)
}

shift_date () {
     ! (( ${jul} )) || (( ${ns} )) &&
        shift_date_greg $1 ||
            shift_date_jul $1
}

byzantine_year () {
    let "byzyear = year + 5508"
    [ ${month} -gt 08 ] && let "byzyear++"
    return 0
}

print () {
    local output="${month}-${day}"

    (( ${y} )) && ! (( ${byz} )) && ! (( ${s} )) &&
        output="${output}-${year}"

    (( ${byz} )) && ! (( ${s} )) && byzantine_year &&
        output="${output}-${byzyear}"

    (( ${verbose} )) && output="${name}: ${output}"

    echo ${output}
}

calculate_pascha () {
    [ -z ${year} ] && year="$(date +%Y)"

    (( "${greg}" )) && ! (( "${jul}" )) &&
        gregorian ||
            julian

    (( "${ns}" )) && julian_to_gregorian
}

shift_and_print () {
    local offset=$1
    shift_date ${offset}
    let "offset*=-1"
    print
    shift_date ${offset}
}

meatfare () {
    name="Meatfare"
    shift_and_print -56
}

cheesefare () {
    name="Cheesefare"
    shift_and_print -49
}

ash_wednesday () {
    name="Ash Wednesday"
    shift_and_print -46
}

midfeast () {
    name="Midfeast of Pentecost"
    shift_and_print 24
}

leavetaking () {
    name="Leavetaking of Pascha"
    shift_and_print 38
}

ascension () {
    name="Ascension"
    shift_and_print 39
}

pentecost () {
    name="Pentecost"
    shift_and_print 49
}

chronological_easter () {
    (( ${easter} )) && name="Easter" || name="Pascha"
    print
}

set_diff_dates_julian () {
    let "offset=${year} / 100 - ${year} / 400 - 2"
    local offset_year=0
    local jan_feb=0
    local feb29=0
    local year_offset=""

    ! (( $(( ${year} % 100 )) )) && (( $(( ${year} % 400 )) )) && offset_year=1
    { [ ${month} -eq 01 ] || [ ${month} -eq 02 ]; } && jan_feb=1
    [ ${month} -eq 02 ] && [ ${day} -eq 29 ] && feb29=1

    (( ${offset_year} )) && (( ${jan_feb} )) && let "offset -= 1"
    (( ${offset_year} )) && (( ${feb29} )) && let "year += 4" && year_offset="-4 year"


    IFS=- read diffYear diffMonth diffDay <<< $(date -d "${year}-${month}-${day} +${offset} day ${year_offset}" +%Y-%m-%d)
}

set_diff_dates_gregorian () {
    diffYear=${year}
    diffMonth=${month}
    diffDay=${day}
}

set_diff_dates () {
    ! (( ${ns} )) && ! (( ${greg} )) && set_diff_dates_julian ||
            set_diff_dates_gregorian
}

diff_dates () {
    output=$(( ($(date -d "${diffYear}-${diffMonth}-${diffDay}" +%s)- $(date -d "00:00" +%s))/86400 ))
}

date_next_pascha () {
    local monthPascha=${month}
    local dayPascha=${day}

    let "year++"
    calculate_pascha
    set_diff_dates
    let "year--"
    diff_dates

    month=${monthPascha}
    day=${dayPascha}

}

days_until () {
    (( ${easter} )) && name="Days until Easter" || name="Days until Pascha"

    set_diff_dates
    diff_dates

    ! (( ${y})) && [ ${output} -lt 0 ] && date_next_pascha

    (( ${verbose} )) && output="${name}: ${output}"

    echo ${output}
}

weeks_between () {
    local monthPascha=${month}
    local dayPascha=${day}
    name="Weeks between calendars"

    (( ${greg} )) && ! (( ${jul} )) && julian && julian_to_gregorian &&
        monthJul=${month} && dayJul=${day} &&
        monthGreg=${monthPascha} && dayGreg=${dayPascha} &&
        month=${monthPascha} && day=${dayPascha}

    (( ${ns} )) && gregorian &&
        monthGreg=${month} && dayGreg=${day} &&
        monthJul=${monthPascha} && dayJul=${dayPascha} &&
        month=${monthPascha} && day=${dayPascha}

    ! (( ${ns} )) && { ! (( ${greg} )) || (( ${jul} )); } && julian_to_gregorian &&
        monthJul=${month} && dayJul=${day} && gregorian &&
        monthGreg=${month} && dayGreg=${day} &&
        month=${monthPascha} && day=${dayPascha}

    output=$(( ($(date -d "${year}-${monthJul}-${dayJul}" +%s)- $(date -d "${year}-${monthGreg}-${dayGreg}" +%s))/86400/7 ))

    (( ${verbose} )) && output="${name}: ${output}"

    echo ${output}
}

main () {
    calculate_pascha
    ! (( ${x} )) && print
    (( ${daysUntil} )) && days_until
    (( ${weeksBetween} )) && weeks_between

    (( ${meat} )) && meatfare
    (( ${cheese} )) && cheesefare
    (( ${ash} )) && ash_wednesday
    (( ${chron} )) && chronological_easter
    (( ${mid} )) && midfeast
    (( ${leave} )) && leavetaking
    (( ${asc} )) && ascension
    (( ${pent} )) && pentecost
}

while getopts "jJgbsdDmcaMlApxXvVy:h" o; do
    case "${o}" in
        j)
            jul=1
            ;;
        J)
            jul=1
            ns=1
            ;;
        g)
            greg=1
            ;;
        b)
            byz=1
            ;;
        s)
            s=1
            ;;
        d)
            daysUntil=1
            ;;
        D)
            weeksBetween=1
            ;;
        m)
            meat=1
            ;;
        c)
            cheese=1
            ;;
        a)
            ash=1
            ;;
        M)
            mid=1
            ;;
        l)
            leave=1
            ;;
        A)
            asc=1
            ;;
        p)
            pent=1
            ;;
        x)
            x=1
            ;;
        X)
            chron=1
            x=1
            ;;
        v)
            verbose=1
            ;;
        V)
            name="Easter"
            easter=1
            verbose=1
            ;;
        y)
            year=${OPTARG}
            y=1
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

main
